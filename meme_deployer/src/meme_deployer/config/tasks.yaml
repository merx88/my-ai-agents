generate_token_metadata:
  description: >
    Read 'output/final.md', which contains the trending keyword and its explanation.
    Given a trend keyword and a short explanation, create meme token metadata.
    This includes a creative name, an all-uppercase symbol (3–6 letters), and a brief, witty description 
    connecting the trend to meme culture.
    The name should be catchy or playful, and the description should highlight why this token exists.
    After generating the metadata, call the File Writer Tool to save the result as a JSON file named 'output/metadata/token_metadata.json'.
    You must include the correct file name based on the symbol.
  expected_output: >
    A JSON file output/metadata/token_metadata.json
    A JSON object with the following structure:
    {
      "name": "<Token Name>",
      "symbol": "<SYMBOL>",
      "description": "<Witty, concise token description>"
    }

  agent: token_meta_generator

visual_prompt_generator:
  role: >
    Visual Prompt Engineer
  goal: >
    Generate visually striking, context-aware prompts for AI image generation models based on trending topics. Prompts should be memorable, symbolic when appropriate, and accurate—especially when real people are involved—while adhering to strong stylistic and compositional principles.
  backstory: >
    This agent converts real-time cultural, political, or entertainment trends into high-quality visual prompts. It guides image models like DALL·E or Midjourney using artistic direction, visual symbolism, and narrative clarity to produce viral, iconic, and coherent imagery. It avoids ambiguous metaphor or overused tropes unless they are core to the trend’s meaning and impact.

generate_image_prompt:
  description: >
    Given a trend keyword and its explanation, write a vivid and specific image generation prompt suitable for DALL·E, Midjourney, or other visual AI models.

    The prompt must follow these core principles:

    1. **ICONIC & MEMORABLE**: Describe a unique, snapshot-worthy visual that instantly conveys the subject’s relevance. Avoid generic compositions; focus on expressive moments, symbolic gestures, or dynamic framing.

    2. **SYMBOLIC & THEMATIC**: Translate the “Why it’s trending” into meaningful visual metaphors or direct representations. Every element should reinforce the core theme or emotional resonance. Symbolic elements should only be used when directly relevant to the subject.

    3. **STYLISTIC PRECISION**: Clearly state the desired artistic style (e.g., “photo-realistic”, “hyper-realistic cinematic render”, “digital pop-art”). Include lighting details (e.g., “golden hour glow”, “dramatic spotlight”), color palette (e.g., “team colors”, “ethereal pastels”), and overall atmosphere (e.g., “triumphant”, “reflective”, “urgent”).  
       While cartoon or caricature styles are technically possible, **they should be avoided unless stylistically essential** to the trend's tone or audience.

    4. **FOCUSED COMPOSITION**: Keep the main subject as the unambiguous focal point. Backgrounds should be clean, blurred, or symbolically relevant to enhance clarity.

    5. **SPECIFIC VISUAL DETAILING**: Describe facial expression, posture, clothing details, props, and any relevant actions. Avoid vague descriptors.

    6. **TECHNICAL CONTROL**:
       - Append this negative prompt to filter undesirable outputs:  
         `Negative prompt: blurry, text, low quality, deformed, bad anatomy, generic, watermark, oversaturated, unrealistic`

    7. **REAL-PERSON HANDLING**:
       - If the trend involves a real person, their **full name must appear** in the prompt.
       - Describe them in detail: age range, hairstyle, facial features, clothing, typical context (e.g., stadium, press conference), and any signature accessories or gestures.
       - **Do not use cartoon, stylized, caricature, or meme art styles** when depicting real people. Only use **photo-realistic**, **cinematic**, or **press-style** renderings to maintain likeness and respect.

    Additional guideline:  
    Use grounded and literal imagery. Avoid metaphorical or symbolic language unless it is directly relevant to the trend itself. Make the scene visually intentional by specifying the setting, background elements, mood, lighting, and overall atmosphere to create a vivid and unambiguous mental image.

  expected_output: >
    A txt file output/prompts/image_prompt.txt
    A plain-text image generation prompt.
    The output should be a single English paragraph suitable for guiding an AI image generation model.
    Do not wrap it in Markdown or JSON. Save this file in output/prompts.

  agent: visual_prompt_generator

generate_image_from_file:
  description: >
    Read the image prompt from 'output/prompts/image_prompt.txt'.
    Use that prompt to generate an image with DALL·E via the DalleTool.
    Once the image is generated and the URL is available, use it to download and save the image 
    to 'output/images/token_image.png'.
  expected_output: >
    Final saved image confirmation message, e.g. "Image saved to output/images/token_image.png"
  agent: image_generator

assemble_metadata:
  description: >
    Read the metadata files in 'output/metadata/' folder to extract:
    - name
    - symbol
    - description

    Assume the image has been saved to 'output/images/token_image.png'.

    Your task is to return a Python dictionary containing all fields combined:

    {
      "name": "<token name>",
      "symbol": "<token symbol>",
      "description": "<token description>",
      "image_path": "output/images/token_image.png"
    }

    Your final answer MUST be valid Python code that defines and prints this dictionary.
  expected_output: >
    A Python dictionary in code format that includes all fields and prints the result.
  agent: final_result_assembler


assemble_metadata:
  description: >
    Read the file 'output/metadata/token_metadata.json' which contains JSON-formatted meme token metadata
    (fields: name, symbol, description). Combine this metadata with the fixed image path
    'output/images/token_image.png' and create a Python dictionary named `final_token_metadata`.

    Save this dictionary into a Python file located at 'output/final_token_metadata.py'. The file must define
    the variable `final_token_metadata` as a Python dictionary with the following structure:

    final_token_metadata = {
      "name": "...",
      "symbol": "...",
      "description": "...",
      "image_path": "output/images/token_image.png"
    }
  expected_output: >
    A python file output/final_token_metadata.json
  agent: metadata_assembler
